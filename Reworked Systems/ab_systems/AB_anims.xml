<?xml version="1.0" encoding="UTF-8"?>
<SimBase.Document
        Type="AceXML"
        version="1,0"
        id="AB_Anim">
<Descr>AceXML Document</Descr>
<Filename>AB_Anim.xml</Filename>
<SimGauge.Gauge id="Gauge">
<FloatPosition>0.000,0.000</FloatPosition>
<Update_When_Hidden>True</Update_When_Hidden>
<Update id="AB_Anim">
<Frequency>18</Frequency>
<Script>

(L:Pause_code, bool) 0 ==
if{
<!--  Wiper anim L -->
	(L:AB_wiperL, enum) 2 == (L:Wiperstart_fastL, enum) 0 == &amp;&amp; 
	if{
		1 (&gt; L:Wiperstart_fastL, enum)
		0 (&gt; L:Wiperstart_slowL, enum)
	}
	(L:Wiperstart_fastL, enum) 1 ==
	if{
		(L:Wiper_PositionL, number) 3 + (&gt; L:Wiper_PositionL, number)
		1 (&gt; L:ASC_WIPERS_FAST_L, bool)
		(L:Wiper_PositionL, number) 30 &gt;
		if{
			30 (&gt; L:Wiper_PositionL, number)
			2 (&gt; L:Wiperstart_fastL, enum)
		}
	}
	(L:Wiperstart_fastL, enum) 2 ==
	if{
		(L:Wiper_PositionL, number) 3 - (&gt; L:Wiper_PositionL, number)
		(L:Wiper_PositionL, number) 0 &lt;
		if{
			0 (&gt; L:Wiper_PositionL, number)
			0 (&gt; L:Wiperstart_fastL, enum)
		}
	}
	(L:AB_wiperL, enum) 1 == (L:Wiperstart_slowL, enum) 0 == &amp;&amp; 
	if{
		1 (&gt; L:Wiperstart_slowL, enum)
		0 (&gt; L:Wiperstart_fastL, enum)
	}
	(L:Wiperstart_slowL, enum) 1 ==
	if{
		(L:Wiper_PositionL, number) 2 + (&gt; L:Wiper_PositionL, number)
		1 (&gt; L:ASC_WIPERS_SLOW_L, bool)
		(L:Wiper_PositionL, number) 30 &gt;
		if{
			30 (&gt; L:Wiper_PositionL, number)
			2 (&gt; L:Wiperstart_slowL, enum)
		}
	}
	(L:Wiperstart_slowL, enum) 2 ==
	if{
		(L:Wiper_PositionL, number) 2 - (&gt; L:Wiper_PositionL, number)
		(L:Wiper_PositionL, number) 0 &lt;
		if{
			0 (&gt; L:Wiper_PositionL, number)
			0 (&gt; L:Wiperstart_slowL, enum)
		}
	}
	
<!--  Wiper anim R -->
	(L:AB_wiperR, enum) 2 == (L:Wiperstart_fastR, enum) 0 == &amp;&amp; 
	if{
		1 (&gt; L:Wiperstart_fastR, enum)
		0 (&gt; L:Wiperstart_slowR, enum)
	}
	(L:Wiperstart_fastR, enum) 1 ==
	if{
		(L:Wiper_PositionR, number) 3 + (&gt; L:Wiper_PositionR, number)
		1 (&gt; L:ASC_WIPERS_FAST_R, bool)
		(L:Wiper_PositionR, number) 30 &gt;
		if{
			30 (&gt; L:Wiper_PositionR, number)
			2 (&gt; L:Wiperstart_fastR, enum)
		}
	}
	(L:Wiperstart_fastR, enum) 2 ==
	if{
		(L:Wiper_PositionR, number) 3 - (&gt; L:Wiper_PositionR, number)
		(L:Wiper_PositionR, number) 0 &lt;
		if{
			0 (&gt; L:Wiper_PositionR, number)
			0 (&gt; L:Wiperstart_fastR, enum)
		}
	}
	(L:AB_wiperR, enum) 1 == (L:Wiperstart_slowR, enum) 0 == &amp;&amp; 
	if{
		1 (&gt; L:Wiperstart_slowR, enum)
		0 (&gt; L:Wiperstart_fastR, enum)
	}
	(L:Wiperstart_slowR, enum) 1 ==
	if{
		(L:Wiper_PositionR, number) 2 + (&gt; L:Wiper_PositionR, number)
		1 (&gt; L:ASC_WIPERS_SLOW_R, bool)
		(L:Wiper_PositionR, number) 30 &gt;
		if{
			30 (&gt; L:Wiper_PositionR, number)
			2 (&gt; L:Wiperstart_slowR, enum)
		}
	}
	(L:Wiperstart_slowR, enum) 2 ==
	if{
		(L:Wiper_PositionR, number) 2 - (&gt; L:Wiper_PositionR, number)
		(L:Wiper_PositionR, number) 0 &lt;
		if{
			0 (&gt; L:Wiper_PositionR, number)
			0 (&gt; L:Wiperstart_slowR, enum)
		}
	}
				
<!--  AB_STDBYCompass_anim -->
	(L:AB_STDBYCompass_anim_set, bool) 1 == (L:AB_STDBYCompass_anim, number) 99 &lt;= &amp;&amp;
	if{
		(L:AB_STDBYCompass_anim, number) 10 + (&gt; L:AB_STDBYCompass_anim, number)
	}
	(L:AB_STDBYCompass_anim_set, bool) 0 == (L:AB_STDBYCompass_anim, number) 1 &gt;= &amp;&amp;
	if{
		(L:AB_STDBYCompass_anim, number) 10 - (&gt; L:AB_STDBYCompass_anim, number)
	}

<!--  Sidewindow CP  -->
	(A:GROUND VELOCITY, knots) 40 &gt;
	(L:Sidewindow_pos_CP, number) 0 &gt; &amp;&amp;
	if{	
		0 (&gt;L:AB_SIDEWINDOW_LOCKING_PIN_LOCKED_CPT, bool)	
		0 (&gt;L:Sidewindow_open_CP, bool)
		1 (&gt; L:Sidewindow_close_CP, bool)
	}
	(L:Sidewindow_open_CP, bool) 1 == (L:Sidewindow_pos_CP, number) 50 &lt; &amp;&amp; (A:GROUND VELOCITY, knots) 40 &lt; &amp;&amp; 
	if{
		(L:Sidewindow_pos_CP, number) 0.5 + (&gt; L:Sidewindow_pos_CP, number)
		
		<!-- play opening sound -->
		(L:WindowsOpen_played_CP, bool) 0 == 
		if{
			1 (&gt; L:WindowsOpen, bool)
			1 (&gt; L:WindowsOpen_played_CP, bool)
			0 (&gt; L:WindowsClosed_played_CP, bool)			
		}			
		
		(L:Sidewindow_pos_CP, number) 16.5 &gt;  
		if{
			(L:Sidewindow_pos_CP, number) 17 == 
			(L:Sidewindow_pos_CP, number) 17.5 == ||
			(L:Sidewindow_pos_CP, number) 19 == || 
			(L:Sidewindow_pos_CP, number) 19.5 == ||
			(L:Sidewindow_pos_CP, number) 21 == || 
			(L:Sidewindow_pos_CP, number) 21.5 == ||
			(L:Sidewindow_pos_CP, number) 23 == || 
			(L:Sidewindow_pos_CP, number) 23.5 == ||
			(L:Sidewindow_pos_CP, number) 25 == || 
			(L:Sidewindow_pos_CP, number) 25.5 == ||
			(L:Sidewindow_pos_CP, number) 27 == || 
			(L:Sidewindow_pos_CP, number) 27.5 == ||
			(L:Sidewindow_pos_CP, number) 29 == || 
			(L:Sidewindow_pos_CP, number) 29.5 == ||
			(L:Sidewindow_pos_CP, number) 31 == || 
			(L:Sidewindow_pos_CP, number) 31.5 == ||
			(L:Sidewindow_pos_CP, number) 33 == || 
			(L:Sidewindow_pos_CP, number) 33.5 == ||
			(L:Sidewindow_pos_CP, number) 35 == || 
			(L:Sidewindow_pos_CP, number) 35.5 == ||
			(L:Sidewindow_pos_CP, number) 37 == ||
			(L:Sidewindow_pos_CP, number) 37.5 == ||
			(L:Sidewindow_pos_CP, number) 39 == ||		 
			(L:Sidewindow_pos_CP, number) 39.5 == ||
			(L:Sidewindow_pos_CP, number) 41 == ||		
			(L:Sidewindow_pos_CP, number) 41.5 == ||
			(L:Sidewindow_pos_CP, number) 43 == ||		
			(L:Sidewindow_pos_CP, number) 43.5 == ||			
			if{
				0.75 (&gt;L:AB_SIDEWINDOW_LOCKING_PIN_LOCKED_CPT, bool)
			}
			els{
				1 (&gt;L:AB_SIDEWINDOW_LOCKING_PIN_LOCKED_CPT, bool)
			}				
		}		
	}
	(L:Sidewindow_close_CP, bool) 1 == (L:Sidewindow_pos_CP, number) 0 &gt; &amp;&amp;
	if{
		(L:Sidewindow_pos_CP, number) 0.875 - (&gt; L:Sidewindow_pos_CP, number)
		
		<!-- play closing sound -->
		(L:WindowsClosed_played_CP, bool) 0 == 
		if{
			1 (&gt; L:WindowsClosed, bool)
			1 (&gt; L:WindowsClosed_played_CP, bool)
			0 (&gt; L:WindowsOpen_played_CP, bool)
		}			
		
		(L:Sidewindow_pos_CP, number) 0 &lt;
		if{
			0 (&gt; L:Sidewindow_pos_CP, number)
		}
	}
	(L:Sidewindow_open_CP, bool) 1 == (L:Sidewindow_pos_CP, number) 50 == &amp;&amp;
	if{
		0 (&gt; L:Sidewindow_open_CP, bool) 
	}
	
	(L:Sidewindow_close_CP, bool) 1 == (L:Sidewindow_pos_CP, number) 0 == &amp;&amp;
	if{
		0 (&gt; L:Sidewindow_close_CP, bool) 
	}

	
	
<!--  Sidewindow FO -->
	(A:GROUND VELOCITY, knots) 40 &gt;
	(L:Sidewindow_pos_FO, number) 0 &gt; &amp;&amp;
	if{	
		0 (&gt;L:AB_SIDEWINDOW_LOCKING_PIN_LOCKED_FO, bool)
		0 (&gt;L:Sidewindow_open_FO, bool)
		1 (&gt; L:Sidewindow_close_FO, bool)
	}
	(L:Sidewindow_open_FO, bool) 1 == (L:Sidewindow_pos_FO, number) 50 &lt; &amp;&amp; (A:GROUND VELOCITY, knots) 40 &lt; &amp;&amp; 
	if{
		(L:Sidewindow_pos_FO, number) 0.5 + (&gt; L:Sidewindow_pos_FO, number)
		
		<!-- play opening sound -->
		(L:WindowsOpen_played_FO, bool) 0 == 
		if{
			1 (&gt; L:WindowsOpen, bool)
			1 (&gt; L:WindowsOpen_played_FO, bool)
			0 (&gt; L:WindowsClosed_played_FO, bool)			
		}		
		
		(L:Sidewindow_pos_FO, number) 16.5 &gt;  
		if{
			(L:Sidewindow_pos_FO, number) 17 == 
			(L:Sidewindow_pos_FO, number) 17.5 == ||
			(L:Sidewindow_pos_FO, number) 19 == || 
			(L:Sidewindow_pos_FO, number) 19.5 == ||
			(L:Sidewindow_pos_FO, number) 21 == || 
			(L:Sidewindow_pos_FO, number) 21.5 == ||
			(L:Sidewindow_pos_FO, number) 23 == || 
			(L:Sidewindow_pos_FO, number) 23.5 == ||
			(L:Sidewindow_pos_FO, number) 25 == || 
			(L:Sidewindow_pos_FO, number) 25.5 == ||
			(L:Sidewindow_pos_FO, number) 27 == || 
			(L:Sidewindow_pos_FO, number) 27.5 == ||
			(L:Sidewindow_pos_FO, number) 29 == || 
			(L:Sidewindow_pos_FO, number) 29.5 == ||
			(L:Sidewindow_pos_FO, number) 31 == || 
			(L:Sidewindow_pos_FO, number) 31.5 == ||
			(L:Sidewindow_pos_FO, number) 33 == || 
			(L:Sidewindow_pos_FO, number) 33.5 == ||
			(L:Sidewindow_pos_FO, number) 35 == || 
			(L:Sidewindow_pos_FO, number) 35.5 == ||
			(L:Sidewindow_pos_FO, number) 37 == ||
			(L:Sidewindow_pos_FO, number) 37.5 == ||
			(L:Sidewindow_pos_FO, number) 39 == ||		 
			(L:Sidewindow_pos_FO, number) 39.5 == ||
			(L:Sidewindow_pos_FO, number) 41 == ||		
			(L:Sidewindow_pos_FO, number) 41.5 == ||
			(L:Sidewindow_pos_FO, number) 43 == ||		
			(L:Sidewindow_pos_FO, number) 43.5 == ||			
			if{
				0.75 (&gt;L:AB_SIDEWINDOW_LOCKING_PIN_LOCKED_FO, bool)
			}
			els{
				1 (&gt;L:AB_SIDEWINDOW_LOCKING_PIN_LOCKED_FO, bool)
			}
		}			
	}
	
	(L:Sidewindow_close_FO, bool) 1 == (L:Sidewindow_pos_FO, number) 0 &gt; &amp;&amp;
	if{
		(L:Sidewindow_pos_FO, number) 0.875 - (&gt; L:Sidewindow_pos_FO, number)
		
		<!-- play closing sound -->
		(L:WindowsClosed_played_FO, bool) 0 == 
		if{
			1 (&gt; L:WindowsClosed, bool)
			1 (&gt; L:WindowsClosed_played_FO, bool)
			0 (&gt; L:WindowsOpen_played_FO, bool)
		}		
		
		(L:Sidewindow_pos_FO, number) 0 &lt;
		if{
			0 (&gt; L:Sidewindow_pos_FO, number)
		}
	}
	
	(L:Sidewindow_open_FO, bool) 1 == (L:Sidewindow_pos_FO, number) 50 == &amp;&amp;
	if{
		0 (&gt; L:Sidewindow_open_FO, bool) 
	}
	
	(L:Sidewindow_close_FO, bool) 1 == (L:Sidewindow_pos_FO, number) 0 == &amp;&amp;
	if{
		0 (&gt; L:Sidewindow_close_FO, bool) 
	}


	
	
<!-- Cabin doors -->
	
<!--  Jumpseat -->
	(L:Jumpseat_open, bool) 1 == (L:Jumpseat_pos, number) 10 &lt; &amp;&amp;
	if{
		(L:Jumpseat_pos, number) 0.3 + (&gt; L:Jumpseat_pos, number)
	}
	(L:Jumpseat_close, bool) 1 == (L:Jumpseat_pos, number) 0 &gt; &amp;&amp;
	if{
		(L:Jumpseat_pos, number) 0.2 - (&gt; L:Jumpseat_pos, number)
	}
	(L:Jumpseat_open, bool) 1 == (L:Jumpseat_pos, number) 10 == &amp;&amp;
	if{
		0 (&gt; L:Jumpseat_open, bool) 
	}
	(L:Jumpseat_close, bool) 1 == (L:Jumpseat_pos, number) 0 == &amp;&amp;
	if{
		0 (&gt; L:Jumpseat_close, bool) 
	}
	
	(L:Jumpseat_open, bool) 1 == (L:Jumpseat_pos, number) 0.5 &lt; &amp;&amp;
	if{
		1 (&gt; L:ASC_OBSERVER_SEAT_EXT, bool) 
	}
	(L:Jumpseat_close, bool) 1 == (L:Jumpseat_pos, number) 9.5 &gt; &amp;&amp;
	if{
		1 (&gt; L:ASC_OBSERVER_SEAT_RET, bool) 
	}

<!--  Sunshade1 -->
(L:Sunshade1_open, bool) 1 == (L:Sunshade1_pos, number) 100 &lt; &amp;&amp;
	if{
		(L:Sunshade1_pos, number) 3 + (&gt; L:Sunshade1_pos, number)
	}
	(L:Sunshade1_close, bool) 1 == (L:Sunshade1_pos, number) 0 &gt; &amp;&amp;
	if{
		(L:Sunshade1_pos, number) 2 - (&gt; L:Sunshade1_pos, number)
	}
	(L:Sunshade1_open, bool) 1 == (L:Sunshade1_pos, number) 100 == &amp;&amp;
	if{
		0 (&gt; L:Sunshade1_open, bool) 
	}
	(L:Sunshade1_close, bool) 1 == (L:Sunshade1_pos, number) 0 == &amp;&amp;
	if{
		0 (&gt; L:Sunshade1_close, bool) 
	}

<!--  Sunshade2 -->
	(L:Sunshade2_open, bool) 1 == (L:Sunshade2_pos, number) 100 &lt; &amp;&amp;
	if{
		(L:Sunshade2_pos, number) 3 + (&gt; L:Sunshade2_pos, number)
	}
	(L:Sunshade2_close, bool) 1 == (L:Sunshade2_pos, number) 0 &gt; &amp;&amp;
	if{
		(L:Sunshade2_pos, number) 2 - (&gt; L:Sunshade2_pos, number)
	}
	(L:Sunshade2_open, bool) 1 == (L:Sunshade2_pos, number) 100 == &amp;&amp;
	if{
		0 (&gt; L:Sunshade2_open, bool) 
	}
	(L:Sunshade2_close, bool) 1 == (L:Sunshade2_pos, number) 0 == &amp;&amp;
	if{
		0 (&gt; L:Sunshade2_close, bool) 
	}



<!-- Spoiler Logic removed here due to C++ code transfer -->


	<!-- XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX WORK AREA XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX -->

	


	
	(L:AB_PDS_COM1_SWAP, number) 1 ==
	if{
		(L:AB_PDS_COM1_SWAP_timout, number) 1 + (&gt; L:AB_PDS_COM1_SWAP_timout, number)
		(L:AB_PDS_COM1_SWAP_timout, number) 54 ==
		if{
			0 (&gt; L:AB_PDS_COM1_SWAP, bool)
			0 (&gt; L:AB_PDS_COM1_SWAP_timout, number)
		}
	}
	
	(L:AB_PDS_COM2_SWAP, number) 1 ==
	if{
		(L:AB_PDS_COM2_SWAP_timout, number) 1 + (&gt; L:AB_PDS_COM2_SWAP_timout, number)
		(L:AB_PDS_COM2_SWAP_timout, number) 54 ==
		if{
			0 (&gt; L:AB_PDS_COM2_SWAP, bool)
			0 (&gt; L:AB_PDS_COM2_SWAP_timout, number)
		}
	}
	
<!-- ECAM Lower Engine oil qty -->
	(L:EngL_Oil_qty, number) (L:EngL_Oil_qty_target, number) &lt;
	if{
		(L:EngL_Oil_qty, number) 0.1 + (&gt; L:EngL_Oil_qty, number)
	}
	(L:EngL_Oil_qty, number) (L:EngL_Oil_qty_target, number) &gt;
	if{
		(L:EngL_Oil_qty, number) 0.1 - (&gt; L:EngL_Oil_qty, number)
	}
	(L:EngL_Oil_qty_target, number) 0.00001 - (&gt; L:EngL_Oil_qty_target, number)

	(L:EngR_Oil_qty, number) (L:EngR_Oil_qty_target, number) &lt;
	if{
		(L:EngR_Oil_qty, number) 0.1 + (&gt; L:EngR_Oil_qty, number)
	}
	(L:EngR_Oil_qty, number) (L:EngR_Oil_qty_target, number) &gt;
	if{
		(L:EngR_Oil_qty, number) 0.1 - (&gt; L:EngR_Oil_qty, number)
	}
	(L:EngR_Oil_qty_target, number) 0.00001 - (&gt; L:EngR_Oil_qty_target, number)

<!-- Flap 1 mode -->
	(L:Flaps_handle_index_hist, number) 0 ==
	(A:FLAPS HANDLE INDEX, number) 1 == &amp;&amp;
	(A:AIRSPEED INDICATED, knots) 100 &lt;= &amp;&amp;
	
	(L:Flaps_handle_index_hist, number) 2 ==
	(A:FLAPS HANDLE INDEX, number) 1 == &amp;&amp;
	(A:AIRSPEED INDICATED, knots) 210 &lt;= &amp;&amp; ||
	if{
		1 (&gt; L:Flap1_mode, number)
	}
	(L:Flaps_handle_index_hist, number) 0 ==
	(A:FLAPS HANDLE INDEX, number) 1 == &amp;&amp;
	(A:AIRSPEED INDICATED, knots) 100 &gt; &amp;&amp;
	
	(L:Flaps_handle_index_hist, number) 2 ==
	(A:FLAPS HANDLE INDEX, number) 1 == &amp;&amp;
	(A:AIRSPEED INDICATED, knots) 210 &gt;= &amp;&amp; ||
	
	(L:Flap1_mode, number) 1 ==
	(A:AIRSPEED INDICATED, knots) 210 &gt; &amp;&amp; ||
	if{
		2 (&gt; L:Flap1_mode, number)
	}
	
	(A:FLAPS HANDLE INDEX, number) 1 !=
	if{
		0 (&gt; L:Flap1_mode, number)
	}
	(A:FLAPS HANDLE INDEX, number) (&gt; L:Flaps_handle_index_hist, number)
	
	<!-- panel lights -->
	(L:AB_PDS_IntLight_INTEG_CPT_Rotary) 0 ==
	(A:LIGHT PANEL, bool) 1 == &amp;&amp; 
	if{
		(&gt; K:PANEL_LIGHTS_TOGGLE)
	}

	(L:AB_PDS_IntLight_INTEG_CPT_Rotary) 0 &gt;
	(A:LIGHT PANEL, bool) 0 == &amp;&amp; 
	if{
		(&gt; K:PANEL_LIGHTS_TOGGLE)
	}		
}

<!-- Wheelchocks -->
	
	(L:MCDU_Wheelchocks, bool) 1 ==
	(A:SIM ON GROUND, bool) 1 == &amp;&amp;
	(A:BRAKE PARKING POSITION, bool) 1 ==
	(A:BRAKE PARKING POSITION, bool) 0 ==
	(A:ENG1 N1 RPM, percent) 5 &lt; &amp;&amp;
	(A:ENG2 N1 RPM, percent) 5 &lt; &amp;&amp; || &amp;&amp;
	(L:Wheelchocks_Set, bool) 0 == &amp;&amp;
	if{
		1 (&gt; L:Wheelchocks, bool)
		1 (&gt; L:Wheelchocks_Set, bool)
	}

	(L:MCDU_Wheelchocks, bool) 0 ==
	(L:Wheelchocks_Set, bool) 1 == &amp;&amp;
	if{
		0 (&gt; L:Wheelchocks, bool)
		0 (&gt; L:Wheelchocks_Set, bool)
	}

<!-- Cones -->

	(L:MCDU_cones, bool) 1 == 
	(A:BRAKE PARKING POSITION, bool) 1 == 
	(L:Wheelchocks, bool) 1 == || &amp;&amp;
	(A:SIM ON GROUND, bool) 1 == &amp;&amp;
	if{
		1 (&gt; L:Cones, bool)
	}

	(L:Cones, bool) 1 ==
	(L:MCDU_cones, bool) 0 == &amp;&amp; 
	if{
		0 (&gt; L:Cones, bool)
	}

<!-- Ext Power -->

	(L:MCDU_EXTPOWERCART, bool) 1 ==
	(A:BRAKE PARKING POSITION, bool) 1 == 
	(L:Wheelchocks, bool) 1 == || &amp;&amp;
	(A:SIM ON GROUND, bool) 1 == &amp;&amp;
	if{
		1 (&gt; L:Extpowercart, bool)
		1 (&gt; L:ASC_GenRunLoop, bool)
	}

	(L:MCDU_EXTPOWERCART, bool) 0 ==
	(L:Extpowercart, bool) 1 == &amp;&amp; 
	if{
		0 (&gt; L:Extpowercart, bool)
		0 (&gt; L:ASC_GenRunLoop, bool)
	}
	
	(L:MCDU_EXTPOWER, bool) 1 ==
	(A:BRAKE PARKING POSITION, bool) 1 == 
	(L:Wheelchocks, bool) 1 == || &amp;&amp;
	(A:SIM ON GROUND, bool) 1 == &amp;&amp;
	if{
		1 (&gt; L:Extpower, bool)
	}

	(L:MCDU_EXTPOWER, bool) 0 ==
	(L:Extpower, bool) 1 == &amp;&amp; 
	if{
		0 (&gt; L:Extpower, bool)
	}

	(A:SIM ON GROUND, bool) 0 == ||
	(A:GROUND VELOCITY, knots) 0.3 &gt;= ||
	(A:IS SLEW ACTIVE, bool) 0 == &amp;&amp;
	if{
		0 (&gt; L:MCDU_cones, bool)
		0 (&gt; L:MCDU_Wheelchocks, bool)
		0 (&gt; L:MCDU_EXTPOWERCART, bool)
		0 (&gt; L:MCDU_EXTPOWER, bool)
		0 (&gt; L:Cones, bool)
		0 (&gt; L:Wheelchocks, bool)
		0 (&gt; L:Wheelchocks_Set, bool)
		0 (&gt; L:Extpowercart, bool)
		0 (&gt; L:Extpower, bool)
	}


<!-- Rudder limiter -->	
	240 (A:AIRSPEED TRUE, knots) 140 - - 2.4 / (&gt; L:Rudderspeed, number)
	3.333 (L:Rudderspeed, number) 0.266 * 0.034 + * 165.83 * (&gt; L:Ruddermax, number)
	(A:AIRSPEED TRUE, knots) 140 &lt;
	if{
		16583 (&gt; L:Ruddermax, number)
	}
	
	(A:AIRSPEED TRUE, knots) 380 &gt;
	if{
		1879 (&gt; L:Ruddermax, number)
	}
		
<!-- Downtrim limiter -->		
	(A:ELEVATOR TRIM PCT, percent) -29 &lt;
	if{
		4743 (&gt; K:AXIS_ELEV_TRIM_SET)
	}
	
	(A:PLANE ALT ABOVE GROUND, feet) 50 &lt;=
	if{
	(A:PLANE ALT ABOVE GROUND, feet) (A:PLANE ALT ABOVE GROUND, feet) 5.5 / + 7 + 5 / (&gt; L:Landlight_heigth2, number) }
	(A:PLANE ALT ABOVE GROUND, feet) 50 &gt;
	if{
	(A:PLANE ALT ABOVE GROUND, feet) 22 + 5.6 / (&gt; L:Landlight_heigth2, number) }
	
	(L:AB_Sun_Phase, number) (A:Radio height,feet) 11.8 - 25 / near - 0 max (&gt; L:AB_Sun_Phase2, number)
	
	(L:AB_Sun_Phase, number) (A:Radio height,feet) 11.8 - 10.5 / near - 0 max (&gt; L:AB_Sun_Phase3, number)
	
	(A:AMBIENT VISIBILITY, meter) 8046.72 &gt;
	if{
		0 (&gt; L:AB_Light_LOVIZ, number) }
	els{		
		1 (&gt; L:AB_Light_LOVIZ, number) }
		
	(L:AB_Sun_Phase2, number) 0 ==
	(A:LIGHT LANDING, bool) 0 == ||
	(A:PLANE PITCH DEGREES, degrees) -9.5 &lt;= ||
	if{
	0 (&gt;L:AB_LANDLIGHT_ANIM_SCALE_1, number)
	0 (&gt;L:AB_LANDLIGHT_ANIM_SCALE_2, number)
	0 (&gt;L:AB_LANDLIGHT_ANIM_SCALE_3, number)
	0 (&gt;L:AB_LANDLIGHT_ANIM_SCALE_4, number)

	}
	
	(A:AMBIENT TEMPERATURE, celsius) -30 &lt;=
	if{ (A:SMOKE ENABLE:1,bool) ! if{ 1 (&gt;K:SMOKE_ON) } }
	els{ (A:SMOKE ENABLE:1,bool) if{ 1 (&gt;K:SMOKE_OFF) } }	
	
	(A:AMBIENT TEMPERATURE, celsius) -30 &lt;=
	if{ (A:SMOKE ENABLE:2,bool) ! if{ 2 (&gt;K:SMOKE_ON) } }
	els{ (A:SMOKE ENABLE:2,bool) if{ 2 (&gt;K:SMOKE_OFF) } }
	
	(A:Radio height,feet) 11.8 - 60 * (&gt; L:Landlight_Distance, number)
	
	(A:LIGHT LANDING, bool) 1 ==
	if{
		
		(L:AB_Sun_Phase2, number) 1 ==
		if{
		(L:Landlight_Distance, number) 33.360 / 1 max (&gt;L:AB_LANDLIGHT_ANIM_SCALE_1, number)
		0 (&gt;L:AB_LANDLIGHT_ANIM_SCALE_2, number)
		0 (&gt;L:AB_LANDLIGHT_ANIM_SCALE_3, number)
		0 (&gt;L:AB_LANDLIGHT_ANIM_SCALE_4, number)
		

		}
		
		(L:AB_Sun_Phase2, number) 2 ==
		if{
		0 (&gt;L:AB_LANDLIGHT_ANIM_SCALE_1, number)
		(L:Landlight_Distance, number) 33.360 / 1 max (&gt;L:AB_LANDLIGHT_ANIM_SCALE_2, number)
		(L:Landlight_Distance, number) 33.360 / 1 max (&gt;L:AB_LANDLIGHT_ANIM_SCALE_3, number)
		0 (&gt;L:AB_LANDLIGHT_ANIM_SCALE_4, number)
		

		}
		
		(L:AB_Sun_Phase2, number) 3 ==
		if{
		(L:Landlight_Distance, number) 33.360 / 1 max (&gt;L:AB_LANDLIGHT_ANIM_SCALE_1, number)
		(L:Landlight_Distance, number) 33.360 / 1 max (&gt;L:AB_LANDLIGHT_ANIM_SCALE_2, number)
		0 (&gt;L:AB_LANDLIGHT_ANIM_SCALE_3, number)
		0 (&gt;L:AB_LANDLIGHT_ANIM_SCALE_4, number)
		

		}
		
		(L:AB_Sun_Phase2, number) 4 ==
		if{
		(L:Landlight_Distance, number) 33.360 / 1 max (&gt;L:AB_LANDLIGHT_ANIM_SCALE_1, number)
		(L:Landlight_Distance, number) 33.360 / 1 max (&gt;L:AB_LANDLIGHT_ANIM_SCALE_2, number)
		(L:Landlight_Distance, number) 33.360 / 1 max (&gt;L:AB_LANDLIGHT_ANIM_SCALE_3, number)
		0 (&gt;L:AB_LANDLIGHT_ANIM_SCALE_4, number)		

		}
		
		(L:AB_Sun_Phase2, number) 5 ==
		if{
		(L:Landlight_Distance, number) 33.360 / 1 max (&gt;L:AB_LANDLIGHT_ANIM_SCALE_1, number)
		(L:Landlight_Distance, number) 33.360 / 1 max (&gt;L:AB_LANDLIGHT_ANIM_SCALE_2, number)
		(L:Landlight_Distance, number) 33.360 / 1 max (&gt;L:AB_LANDLIGHT_ANIM_SCALE_3, number)
		(L:Landlight_Distance, number) 33.360 / 1 max (&gt;L:AB_LANDLIGHT_ANIM_SCALE_4, number)
		

		}
		
	}
	
	(L:AB_Sun_Phase2, number) 0 ==
	(L:AB_OVH_LIGHTS_RWYTURNOFF, number) 0 == ||
	if{
	0 (&gt;L:AB_RWYTOLIGHT_SCALE_1, number)
	0 (&gt;L:AB_RWYTOLIGHT_SCALE_2, number)
	0 (&gt;L:AB_RWYTOLIGHT_SCALE_3, number)
	0 (&gt;L:AB_RWYTOLIGHT_SCALE_4, number)

	}
	
	(L:AB_OVH_LIGHTS_RWYTURNOFF, number) 1 ==
	if{
		
		(L:AB_Sun_Phase2, number) 1 ==
		if{
		(L:Landlight_Distance, number) 33.360 / 1 max (&gt;L:AB_RWYTOLIGHT_SCALE_1, number)
		0 (&gt;L:AB_RWYTOLIGHT_SCALE_2, number)
		0 (&gt;L:AB_RWYTOLIGHT_SCALE_3, number)
		0 (&gt;L:AB_RWYTOLIGHT_SCALE_4, number)	}
		
		(L:AB_Sun_Phase2, number) 2 ==
		if{
		(L:Landlight_Distance, number) 33.360 / 1 max (&gt;L:AB_RWYTOLIGHT_SCALE_1, number)
		(L:Landlight_Distance, number) 33.360 / 1 max (&gt;L:AB_RWYTOLIGHT_SCALE_2, number)
		0 (&gt;L:AB_RWYTOLIGHT_SCALE_3, number)
		0 (&gt;L:AB_RWYTOLIGHT_SCALE_4, number)	}
		
		(L:AB_Sun_Phase2, number) 3 ==
		if{
		0 (&gt;L:AB_RWYTOLIGHT_SCALE_1, number)
		(L:Landlight_Distance, number) 33.360 / 1 max (&gt;L:AB_RWYTOLIGHT_SCALE_2, number)
		(L:Landlight_Distance, number) 33.360 / 1 max (&gt;L:AB_RWYTOLIGHT_SCALE_3, number)
		0 (&gt;L:AB_RWYTOLIGHT_SCALE_4, number)	}
		
		(L:AB_Sun_Phase2, number) 4 ==
		if{
		(L:Landlight_Distance, number) 33.360 / 1 max (&gt;L:AB_RWYTOLIGHT_SCALE_1, number)
		(L:Landlight_Distance, number) 33.360 / 1 max (&gt;L:AB_RWYTOLIGHT_SCALE_2, number)
		(L:Landlight_Distance, number) 33.360 / 1 max (&gt;L:AB_RWYTOLIGHT_SCALE_3, number)
		0 (&gt;L:AB_RWYTOLIGHT_SCALE_4, number)	}
		
		(L:AB_Sun_Phase2, number) 5 ==
		if{
		(L:Landlight_Distance, number) 33.360 / 1 max (&gt;L:AB_RWYTOLIGHT_SCALE_1, number)
		(L:Landlight_Distance, number) 33.360 / 1 max (&gt;L:AB_RWYTOLIGHT_SCALE_2, number)
		(L:Landlight_Distance, number) 33.360 / 1 max (&gt;L:AB_RWYTOLIGHT_SCALE_3, number)
		(L:Landlight_Distance, number) 33.360 / 1 max (&gt;L:AB_RWYTOLIGHT_SCALE_4, number)
		

		}
		
	}
	
	(L:AB_TAXI_LT, number) 1 ==
	(L:AB_Sun_Phase2, number) 3 &lt;= ||
	(L:AB_Sun_Phase2, number) 1 != &amp;&amp;
	if{		
	(L:AB_Sun_Phase2, number) 1 - 0 max (&gt; L:AB_Sun_Phase2, number) }	
	
	
	(L:AB_Sun_Phase2, number) 0 ==
	(L:AB_TAXI_LT, number) 0 == ||
	if{
	0 (&gt;L:AB_TAXILIGHT_SCALE_1, number)
	0 (&gt;L:AB_TAXILIGHT_SCALE_2, number)
	0 (&gt;L:AB_TAXILIGHT_SCALE_3, number)
	0 (&gt;L:AB_TAXILIGHT_SCALE_4, number) }
	
	(L:AB_TAXI_LT, number) 0 != 
	if{

		(L:AB_Sun_Phase2, number) 1 ==
		if{
		(L:Landlight_Distance, number) 33.360 / 1 max (&gt;L:AB_TAXILIGHT_SCALE_1, number)
		0 (&gt;L:AB_TAXILIGHT_SCALE_2, number)
		0 (&gt;L:AB_TAXILIGHT_SCALE_3, number)
		0 (&gt;L:AB_TAXILIGHT_SCALE_4, number) }
		
		(L:AB_Sun_Phase2, number) 2 ==
		if{
		(L:Landlight_Distance, number) 33.360 / 1 max (&gt;L:AB_TAXILIGHT_SCALE_1, number)
		(L:Landlight_Distance, number) 33.360 / 1 max (&gt;L:AB_TAXILIGHT_SCALE_2, number)
		0 (&gt;L:AB_TAXILIGHT_SCALE_3, number)
		0 (&gt;L:AB_TAXILIGHT_SCALE_4, number) }
		
		(L:AB_Sun_Phase2, number) 3 ==
		if{
		0 (&gt;L:AB_TAXILIGHT_SCALE_1, number)
		(L:Landlight_Distance, number) 33.360 / 1 max (&gt;L:AB_TAXILIGHT_SCALE_2, number)
		(L:Landlight_Distance, number) 33.360 / 1 max (&gt;L:AB_TAXILIGHT_SCALE_3, number)
		0 (&gt;L:AB_TAXILIGHT_SCALE_4, number) }
		
		(L:AB_Sun_Phase2, number) 4 ==
		if{
		(L:Landlight_Distance, number) 33.360 / 1 max (&gt;L:AB_TAXILIGHT_SCALE_1, number)
		(L:Landlight_Distance, number) 33.360 / 1 max (&gt;L:AB_TAXILIGHT_SCALE_2, number)
		(L:Landlight_Distance, number) 33.360 / 1 max (&gt;L:AB_TAXILIGHT_SCALE_3, number)
		0 (&gt;L:AB_TAXILIGHT_SCALE_4, number) }
		
		(L:AB_Sun_Phase2, number) 5 ==
		if{
		(L:Landlight_Distance, number) 33.360 / 1 max (&gt;L:AB_TAXILIGHT_SCALE_1, number)
		(L:Landlight_Distance, number) 33.360 / 1 max (&gt;L:AB_TAXILIGHT_SCALE_2, number)
		(L:Landlight_Distance, number) 33.360 / 1 max (&gt;L:AB_TAXILIGHT_SCALE_3, number)
		(L:Landlight_Distance, number) 33.360 / 1 max (&gt;L:AB_TAXILIGHT_SCALE_4, number) }
	}
</Script>
</Update>
<Update>
	<script> <!-- Spoiler Inhibitor-->
		    (A:sim on ground,bool) 0 ==
    		(L:FMA_THRmode, number) 9 == || <!-- A.FLOOR-->
    		(L:Throttle_ani_fix_L, number) 75 &gt;= (L:Throttle_ani_fix_R, number) 75 &gt;= || || <!--MCT detent-->
    		(A:flaps handle index,number) 5 == || <!--CONF F-->
    		if{
        		0 (&gt;K:SPOILERS_SET) <!--inhibits-->
    		}
	</script>
</Update>
</SimGauge.Gauge>
</SimBase.Document>
